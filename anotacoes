TDD E JAVA: TESTES AUTOMATIZADOS COM JUNIT

*** AULA 1 - Testes automatizados ***


1. Quais as principais vantagens de se utilizar a prática de escrever testes automatizados em uma aplicação?

-- Garantir que o código da aplicação atende corretamente aos requisitos de negócio.
(Os testes automatizados ajudam a manter a qualidade da aplicação, pois validam se os requisitos de negócio estão sendo
atendidos conforme o esperado.)
-- Facilitar a manutenção do software.
(Testes automatizados facilitam a manutenção do software, pois qualquer alteração que cause algum impacto será
rapidamente detectada.)


Nessa aula, você aprendeu:

    • O que são testes automatizados;
    • A importância de se escrever testes automatizados em uma aplicação;
    • Como escrever um teste automatizado utilizando uma classe Java com o método main.

*** AULA 2 - JUnit ***

1. Uma das facilidades do JUnit é avaliar se os testes estão passando ou falhando. Como o JUnit nos fornece
esse feedback?
-- Via relatório exibido na IDE, como por exemplo a view JUnit no Eclipse.
(As IDEs possuem plugins de integração com o JUnit, facilitando a análise dos resultados dos testes executados.)

No IntelliJ os resultados são mostrados na aba Run e quando há falha existe a descrição do erro e o retorno
divergente.

2. Por qual motivo devemos utilizar os métodos estáticos assert do JUnit, como por exemplo o assertEquals?
-- Para validar se a implementação atende aos requisitos esperados.
(Os métodos assert nos permitem verificar se a classe testada está executando seu comportamento conforme o esperado.)

Nessa aula, você aprendeu:

    • A história do JUnit;
    • Como adicionar o JUnit ao projeto;
    • Como escrever um teste automatizado com JUnit;
    • Como executar os testes com JUnit e analisar o resultado da execução.

*** AULA 2 - TDD: Test-Driven Development ***

Princípios do método TDD consiste em arquitetar primeiro os testes com base nos requisitos da aplicação e com
base nele realizar a implementação do código. Após, realizara refatoração do código para melhorar a implementação
e possíveis manutenções posteriores.

1. Aprendemos que uma das etapas do TDD é chamada de refatoração. Quando devemos realizar tal etapa ao desenvolver
ma funcionalidade com TDD?
-- Quando a qualidade do código estiver ruim.
(A refatoração nos ajuda a manter a qualidade do código, algo extremamente importante para a manutenção de
uma aplicação.)


Vantagens do TDD

• Código já sai "testado"; (pela ordem ser inversa, ao final da implementação o teste já está pronto)
• Evita testes "viciados" na implementação (ex: escrever testes pensando na implementação e não no comportamento,
o que é uma má prática)
• Refatoração faz parte do processo (uma boa prática e garante a qualidade do código)
• Ajuda a manter o foco;
• Temos uma "tendência" em escrever um código mais simples (simples de testar e de implementar, aos poucos isso vai
acontecendo)

Quando utilizar o TDD?
Normalmente quando será implementada uma funcionalidade complexa e que ainda não está muito claro o que será necessário,
o TDD é útil porque funciona como um rascunho, ajuda a pensar no código, ajuda no foco e na implementação rápida
e simples.
Códigos que levarão algoritmos, validações e coisas complexas

Códigos simples e triviais não tem vantagem em uso do TDD.

2. Quais as principais vantagens de se utilizar o TDD?
-- A funcionalidade implementada já sai coberta por testes
(No TDD o teste vem antes, o que garante que a funcionalidade já será implementada com cobertura de testes.)
-- TDD ajuda a manter o foco durante a implementação de uma funcionalidade.
(Ao implementar os cenários de teste a tendência é manter o foco durante a implementação.)

Nessa aula, você aprendeu:

    • O que é o TDD;
    • Como escrever uma funcionalidade via TDD;
    • Como realizar uma refatoração no código;
    • As vantagens de escrever os testes antes da implementação.


*** AULA 4 - Lidando com Exceptions ***

1. Qual a maneira correta de testar um método que lança exception?
-- Utilizando o método assertThrows.
(O 'assertThrows' serve para verificar se uma exception foi lançada ao chamar um método.)

Nessa aula, você aprendeu:

   • Como testar métodos que podem lançar exceptions;
   • As abordagens para testar um método que lança uma exception.


