TDD E JAVA: TESTES AUTOMATIZADOS COM JUNIT

*** AULA 1 - Testes automatizados ***


1. Quais as principais vantagens de se utilizar a prática de escrever testes automatizados em uma aplicação?

-- Garantir que o código da aplicação atende corretamente aos requisitos de negócio.
(Os testes automatizados ajudam a manter a qualidade da aplicação, pois validam se os requisitos de negócio estão sendo
atendidos conforme o esperado.)
-- Facilitar a manutenção do software.
(Testes automatizados facilitam a manutenção do software, pois qualquer alteração que cause algum impacto será
rapidamente detectada.)


Nessa aula, você aprendeu:

    • O que são testes automatizados;
    • A importância de se escrever testes automatizados em uma aplicação;
    • Como escrever um teste automatizado utilizando uma classe Java com o método main.

*** AULA 2 - JUnit ***

1. Uma das facilidades do JUnit é avaliar se os testes estão passando ou falhando. Como o JUnit nos fornece
esse feedback?
-- Via relatório exibido na IDE, como por exemplo a view JUnit no Eclipse.
(As IDEs possuem plugins de integração com o JUnit, facilitando a análise dos resultados dos testes executados.)

No IntelliJ os resultados são mostrados na aba Run e quando há falha existe a descrição do erro e o retorno
divergente.

2. Por qual motivo devemos utilizar os métodos estáticos assert do JUnit, como por exemplo o assertEquals?
-- Para validar se a implementação atende aos requisitos esperados.
(Os métodos assert nos permitem verificar se a classe testada está executando seu comportamento conforme o esperado.)

Nessa aula, você aprendeu:

    • A história do JUnit;
    • Como adicionar o JUnit ao projeto;
    • Como escrever um teste automatizado com JUnit;
    • Como executar os testes com JUnit e analisar o resultado da execução.


